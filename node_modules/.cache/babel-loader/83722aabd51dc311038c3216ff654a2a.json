{"ast":null,"code":"var _jsxFileName = \"/Users/limengyang/Workspaces/eShop/src/components/canteen/CounterGird.js\";\nimport React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper\n    },\n    gridList: {\n      width: '95%',\n      height: 450\n    },\n    normal: {\n      color: 'rgba(0, 255, 0, 0.54)'\n    },\n    closed: {\n      color: 'rgba(255, 255, 255, 0.54)'\n    },\n    crowded: {\n      color: 'rgba(255, 255, 0, 0.54)'\n    },\n    flooded: {\n      color: 'rgba(255, 0, 0, 0.54)'\n    }\n  };\n};\n\nvar ConditionalIcon = function ConditionalIcon(props) {\n  var classes = props.classes,\n      canteenStatus = props.canteenStatus,\n      status = props.status;\n\n  if (canteenStatus === \"closed\") {\n    return React.createElement(IconButton, {\n      className: classes.closed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(InfoIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }));\n  } else {\n    if (status === \"normal\") {\n      return React.createElement(IconButton, {\n        className: classes.normal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(InfoIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }));\n    } else if (status === \"crowded\") {\n      return React.createElement(IconButton, {\n        className: classes.crowded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(InfoIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(IconButton, {\n        className: classes.flooded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(InfoIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }));\n    }\n  }\n};\n\nvar TitlebarGridList = function TitlebarGridList(_ref) {\n  var classes = _ref.classes,\n      counters = _ref.counters,\n      canteenStatus = _ref.canteenStatus;\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(GridList, {\n    cellHeight: 240,\n    className: classes.gridList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(GridListTile, {\n    key: \"Subheader\",\n    cols: 2,\n    style: {\n      height: 'auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(ListSubheader, {\n    style: {\n      padding: '0px',\n      fontSize: '20px'\n    },\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Canteen Status: \", canteenStatus)), counters.map(function (counter) {\n    return React.createElement(GridListTile, {\n      key: counter.img,\n      cols: 0.66,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: counter.img,\n      alt: counter.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(GridListTileBar, {\n      title: counter.name,\n      subtitle: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Style: \", counter.style),\n      actionIcon: React.createElement(ConditionalIcon, {\n        classes: classes,\n        canteenStatus: canteenStatus,\n        status: counter.status,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }));\n  })));\n};\n\nTitlebarGridList.propTypes = {\n  classes: PropTypes.object.isRequired,\n  description: PropTypes.string,\n  counters: PropTypes.array\n};\nexport default withStyles(styles)(TitlebarGridList);","map":{"version":3,"sources":["/Users/limengyang/Workspaces/eShop/src/components/canteen/CounterGird.js"],"names":["React","PropTypes","withStyles","GridList","GridListTile","GridListTileBar","ListSubheader","IconButton","InfoIcon","styles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","normal","color","closed","crowded","flooded","ConditionalIcon","props","classes","canteenStatus","status","TitlebarGridList","counters","padding","fontSize","map","counter","img","name","style","propTypes","object","isRequired","description","string","array"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-around',\n        overflow: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n        width: '95%',\n        height: 450,\n    },\n    normal: {\n        color: 'rgba(0, 255, 0, 0.54)',\n    },\n    closed: {\n        color: 'rgba(255, 255, 255, 0.54)',\n    },\n    crowded: {\n        color: 'rgba(255, 255, 0, 0.54)',\n    },\n    flooded: {\n        color: 'rgba(255, 0, 0, 0.54)',\n    }\n});\n\nconst ConditionalIcon = ((props) => {\n    const {classes, canteenStatus, status} = props;\n\n    if (canteenStatus === \"closed\") {\n        return (\n            <IconButton className={classes.closed}>\n                <InfoIcon/>\n            </IconButton>\n        )\n    } else {\n        if (status === \"normal\") {\n            return (\n                <IconButton className={classes.normal}>\n                    <InfoIcon/>\n                </IconButton>\n            )\n\n        } else if (status === \"crowded\") {\n            return (\n                <IconButton className={classes.crowded}>\n                    <InfoIcon/>\n                </IconButton>\n            )\n\n        } else {\n            return (\n                <IconButton className={classes.flooded}>\n                    <InfoIcon/>\n                </IconButton>\n            )\n        }\n    }\n});\n\nconst TitlebarGridList = (({classes, counters, canteenStatus}) => {\n    return (\n        <div className={classes.root}>\n            <GridList cellHeight={240} className={classes.gridList}>\n                <GridListTile key=\"Subheader\" cols={2} style={{height: 'auto'}}>\n                    <ListSubheader style={{padding: '0px', fontSize: '20px'}} component=\"div\">Canteen\n                        Status: {canteenStatus}</ListSubheader>\n                </GridListTile>\n                {counters.map((counter) => (\n                    <GridListTile key={counter.img} cols={0.66}>\n                        <img src={counter.img} alt={counter.name}/>\n                        <GridListTileBar\n                            title={counter.name}\n                            subtitle={<span>Style: {counter.style}</span>}\n                            actionIcon={\n                                <ConditionalIcon\n                                    classes={classes}\n                                    canteenStatus={canteenStatus}\n                                    status={counter.status}\n                                />\n                            }\n                        />\n                    </GridListTile>\n                ))}\n            </GridList>\n        </div>\n    );\n});\n\nTitlebarGridList.propTypes = {\n    classes: PropTypes.object.isRequired,\n    description: PropTypes.string,\n    counters: PropTypes.array\n};\n\nexport default withStyles(styles)(TitlebarGridList);\n\n"]},"metadata":{},"sourceType":"module"}